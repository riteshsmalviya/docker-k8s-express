pipeline {
    agent any
    
    environment {
        DOCKER_HUB_REPO = 'riteshm03/docker-k8s-express'
        CLUSTER_NAME = 'dev'
    }
    
    stages {
        stage('Setup Kind Cluster') {
            steps {
                script {
                    echo 'Setting up Kind cluster...'
                    bat """
                        REM Check if cluster exists
                        kind get clusters | findstr ${CLUSTER_NAME}
                        if %ERRORLEVEL% NEQ 0 (
                            echo Creating Kind cluster: ${CLUSTER_NAME}
                            kind create cluster --name ${CLUSTER_NAME}
                        ) else (
                            echo Kind cluster ${CLUSTER_NAME} already exists - reusing it
                        )
                        
                        REM Ensure kubeconfig is properly set
                        echo Setting up kubeconfig...
                        kind get kubeconfig --name ${CLUSTER_NAME} > temp_kubeconfig
                        set KUBECONFIG=%CD%\\temp_kubeconfig
                        
                        REM Set kubectl context
                        kubectl config use-context kind-${CLUSTER_NAME}
                        
                        REM Verify cluster connectivity
                        echo Testing cluster connectivity...
                        kubectl get nodes
                        if %ERRORLEVEL% NEQ 0 (
                            echo Cluster not accessible, recreating...
                            kind delete cluster --name ${CLUSTER_NAME}
                            kind create cluster --name ${CLUSTER_NAME}
                            kind get kubeconfig --name ${CLUSTER_NAME} > temp_kubeconfig
                            kubectl config use-context kind-${CLUSTER_NAME}
                        )
                        
                        echo Cluster is ready!
                        kubectl get nodes
                        kubectl cluster-info
                    """
                }
            }
        }
        
        stage('Checkout') {
            steps {
                echo 'Checking out code from GitHub...'
                checkout scm
            }
        }
        
        stage('Pull and Load Image') {
            steps {
                script {
                    echo 'Pulling latest image from Docker Hub and loading to Kind...'
                    bat """
                        REM Pull the latest image from Docker Hub
                        echo Pulling ${DOCKER_HUB_REPO}:latest from Docker Hub...
                        docker pull ${DOCKER_HUB_REPO}:latest
                        
                        REM Load latest image into Kind cluster
                        echo Loading latest image into Kind cluster...
                        kind load docker-image ${DOCKER_HUB_REPO}:latest --name ${CLUSTER_NAME}
                        
                        REM Verify image is loaded in Kind
                        echo Verifying image in Kind cluster...
                        docker exec dev-control-plane crictl images | findstr docker-k8s-express || echo Image loaded successfully
                    """
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo 'Deploying to Kubernetes...'
                    bat """
                        REM Delete old deployment to avoid image tag conflicts
                        echo Cleaning up old deployment...
                        kubectl delete deployment express-deployment --ignore-not-found=true
                        
                        REM Wait for cleanup
                        timeout /t 5 /nobreak > nul
                        
                        REM Apply fresh deployment and service  
                        echo Applying fresh deployment...
                        kubectl apply -f k8s/deployment.yaml
                        kubectl apply -f k8s/service.yaml
                        
                        REM Wait for deployment to be ready
                        echo Waiting for deployment to be ready...
                        kubectl wait --for=condition=available --timeout=300s deployment/express-deployment
                        
                        echo Deployment completed!
                        kubectl get pods -l app=express-app
                        kubectl get services express-service
                    """
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    echo 'Verifying deployment...'
                    bat """
                        REM Always run verification regardless of previous stage status
                        echo === FINAL DEPLOYMENT STATUS ===
                        kubectl get deployment express-deployment -o wide 2>nul || echo Deployment not found
                        kubectl get pods -l app=express-app -o wide 2>nul || echo No pods found
                        kubectl get services express-service 2>nul || echo Service not found
                        
                        REM Check events for any issues
                        echo === RECENT EVENTS ===
                        kubectl get events --sort-by=.metadata.creationTimestamp | findstr express 2>nul || echo No events found
                        
                        REM Test if service is responsive
                        kubectl get pods -l app=express-app --no-headers 2>nul | findstr Running >nul
                        if %ERRORLEVEL% EQU 0 (
                            echo === SUCCESS ===
                            echo Application appears to be running successfully!
                            echo Access methods:
                            echo - NodePort: http://localhost:30080
                            echo - Port Forward: kubectl port-forward service/express-service 3000:3000
                        ) else (
                            echo === ISSUES DETECTED ===
                            echo Application may not be fully ready. Check pod status above.
                        )
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo 'üéâ Pipeline completed successfully!'
            echo "‚úÖ Kind cluster: ${CLUSTER_NAME} is running"
            echo "‚úÖ Using image: ${DOCKER_HUB_REPO}:latest"
            echo "‚úÖ Deployed to Kubernetes"
            echo "‚úÖ Access your app at: http://localhost:30080"
        }
        failure {
            echo '‚ùå Pipeline failed!'
            echo "Check logs above for details"
        }
        always {
            script {
                echo 'Pipeline cleanup completed'
                // No local image cleanup needed since we only use :latest
            }
        }
    }
}
