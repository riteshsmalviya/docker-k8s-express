pipeline {
    agent any
    
    environment {
        DOCKER_HUB_REPO = 'riteshm03/docker-k8s-express'
        IMAGE_TAG = "${BUILD_NUMBER}"
        CLUSTER_NAME = 'dev'
    }
    
    stages {
        stage('Setup Kind Cluster') {
            steps {
                script {
                    echo 'Setting up Kind cluster...'
                    bat """
                        REM Check if cluster exists
                        kind get clusters | findstr ${CLUSTER_NAME}
                        if %ERRORLEVEL% NEQ 0 (
                            echo Creating Kind cluster: ${CLUSTER_NAME}
                            kind create cluster --name ${CLUSTER_NAME}
                        ) else (
                            echo Kind cluster ${CLUSTER_NAME} already exists - reusing it
                        )
                        
                        REM Set kubectl context to Kind cluster
                        kubectl config use-context kind-${CLUSTER_NAME}
                        
                        REM Verify cluster is ready
                        kubectl get nodes
                        if %ERRORLEVEL% NEQ 0 (
                            echo Cluster not accessible, recreating...
                            kind delete cluster --name ${CLUSTER_NAME}
                            kind create cluster --name ${CLUSTER_NAME}
                            kubectl config use-context kind-${CLUSTER_NAME}
                        )
                        
                        echo Cluster is ready!
                        kubectl get nodes
                    """
                }
            }
        }
        
        stage('Checkout') {
            steps {
                echo 'Checking out code from GitHub...'
                checkout scm
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    bat "docker build -t ${DOCKER_HUB_REPO}:${IMAGE_TAG} ."
                    bat "docker tag ${DOCKER_HUB_REPO}:${IMAGE_TAG} ${DOCKER_HUB_REPO}:latest"
                }
            }
        }
        
        stage('Load Image to Kind') {
            steps {
                script {
                    echo 'Loading image into Kind cluster...'
                    bat "kind load docker-image ${DOCKER_HUB_REPO}:${IMAGE_TAG} --name ${CLUSTER_NAME}"
                    bat "kind load docker-image ${DOCKER_HUB_REPO}:latest --name ${CLUSTER_NAME}"
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo 'Deploying to Kubernetes...'
                    bat """
                        REM Apply deployment and service
                        kubectl apply -f k8s/deployment.yaml
                        kubectl apply -f k8s/service.yaml
                        
                        REM For development, use recreate strategy to avoid stuck pods
                        echo Scaling down deployment to 0...
                        kubectl scale deployment express-deployment --replicas=0
                        
                        REM Wait for all pods to terminate
                        kubectl wait --for=delete pod -l app=express-app --timeout=60s 2>nul || echo Pods deleted
                        
                        REM Update deployment with new image
                        kubectl set image deployment/express-deployment express=${DOCKER_HUB_REPO}:${IMAGE_TAG} --record
                        
                        REM Scale back up
                        echo Scaling deployment back to 1...
                        kubectl scale deployment express-deployment --replicas=1
                        
                        REM Wait for new pod to be ready
                        kubectl wait --for=condition=available deployment/express-deployment --timeout=120s
                        
                        echo Deployment completed successfully!
                    """
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    echo 'Verifying deployment...'
                    bat """
                        REM Check deployment status
                        kubectl get deployment express-deployment
                        kubectl get pods -l app=express-app -o wide
                        kubectl get services express-service
                        
                        REM Check for any issues
                        kubectl describe deployment express-deployment
                        kubectl get events --sort-by=.metadata.creationTimestamp | findstr express
                        
                        echo Application is accessible at: http://localhost:30080
                        echo Or use port-forward: kubectl port-forward service/express-service 3000:3000
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo '🎉 Pipeline completed successfully!'
            echo "✅ Kind cluster: ${CLUSTER_NAME} is running"
            echo "✅ Image built: ${DOCKER_HUB_REPO}:${IMAGE_TAG}"
            echo "✅ Deployed to Kubernetes"
            echo "✅ Access your app at: http://localhost:30080"
        }
        failure {
            echo '❌ Pipeline failed!'
            echo "Check logs above for details"
        }
        always {
            script {
                echo 'Cleaning up local images...'
                try {
                    bat "docker rmi ${DOCKER_HUB_REPO}:${IMAGE_TAG} 2>nul"
                } catch (Exception e) {
                    echo "Image cleanup completed (or no image to clean)"
                }
            }
        }
    }
}
