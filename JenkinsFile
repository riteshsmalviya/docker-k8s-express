pipeline {
    agent any
    
    environment {
        DOCKER_HUB_REPO = 'riteshm03/docker-k8s-express'
        CLUSTER_NAME = 'dev'
    }
    
    stages {
        stage('Setup Kind Cluster') {
            steps {
                script {
                    echo 'Setting up Kind cluster with port mapping...'
                    bat """
                        REM Check if cluster exists
                        kind get clusters | findstr ${CLUSTER_NAME}
                        if %ERRORLEVEL% NEQ 0 (
                            echo Creating Kind cluster with port mapping: ${CLUSTER_NAME}
                            echo apiVersion: kind.x-k8s.io/v1alpha4 > kind-config.yaml
                            echo kind: Cluster >> kind-config.yaml
                            echo nodes: >> kind-config.yaml
                            echo - role: control-plane >> kind-config.yaml
                            echo   extraPortMappings: >> kind-config.yaml
                            echo   - containerPort: 30080 >> kind-config.yaml
                            echo     hostPort: 3000 >> kind-config.yaml
                            echo     protocol: TCP >> kind-config.yaml
                            kind create cluster --name ${CLUSTER_NAME} --config kind-config.yaml
                        ) else (
                            echo Kind cluster ${CLUSTER_NAME} already exists - checking port mapping...
                            docker port dev-control-plane | findstr 3000 || (
                                echo Recreating cluster with proper port mapping...
                                kind delete cluster --name ${CLUSTER_NAME}
                                echo apiVersion: kind.x-k8s.io/v1alpha4 > kind-config.yaml
                                echo kind: Cluster >> kind-config.yaml
                                echo nodes: >> kind-config.yaml
                                echo - role: control-plane >> kind-config.yaml
                                echo   extraPortMappings: >> kind-config.yaml
                                echo   - containerPort: 30080 >> kind-config.yaml
                                echo     hostPort: 3000 >> kind-config.yaml
                                echo     protocol: TCP >> kind-config.yaml
                                kind create cluster --name ${CLUSTER_NAME} --config kind-config.yaml
                            )
                        )
                        
                        REM Ensure kubeconfig is properly set
                        echo Setting up kubeconfig...
                        kind get kubeconfig --name ${CLUSTER_NAME} > temp_kubeconfig
                        set KUBECONFIG=%CD%\\temp_kubeconfig
                        
                        REM Set kubectl context
                        kubectl config use-context kind-${CLUSTER_NAME}
                        
                        REM Verify cluster connectivity
                        echo Testing cluster connectivity...
                        kubectl get nodes
                        if %ERRORLEVEL% NEQ 0 (
                            echo Cluster not accessible, recreating...
                            kind delete cluster --name ${CLUSTER_NAME}
                            kind create cluster --name ${CLUSTER_NAME} --config kind-config.yaml
                            kind get kubeconfig --name ${CLUSTER_NAME} > temp_kubeconfig
                            kubectl config use-context kind-${CLUSTER_NAME}
                        )
                        
                        echo Cluster is ready with port mapping!
                        kubectl get nodes
                        kubectl cluster-info
                        echo Port mapping: localhost:3000 -> cluster:30080
                    """
                }
            }
        }
        
        stage('Checkout') {
            steps {
                echo 'Checking out code from GitHub...'
                checkout scm
            }
        }
        
        stage('Pull and Load Image') {
            steps {
                script {
                    echo 'Pulling latest image from Docker Hub and loading to Kind...'
                    bat """
                        REM Pull the latest image from Docker Hub
                        echo Pulling ${DOCKER_HUB_REPO}:latest from Docker Hub...
                        docker pull ${DOCKER_HUB_REPO}:latest
                        
                        REM Load latest image into Kind cluster
                        echo Loading latest image into Kind cluster...
                        kind load docker-image ${DOCKER_HUB_REPO}:latest --name ${CLUSTER_NAME}
                        
                        REM Verify image is loaded in Kind
                        echo Verifying image in Kind cluster...
                        docker exec dev-control-plane crictl images | findstr docker-k8s-express || echo Image loaded successfully
                    """
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo 'Deploying to Kubernetes...'
                    bat """
                        REM Delete old deployment to avoid image tag conflicts
                        echo Cleaning up old deployment...
                        kubectl delete deployment express-deployment --ignore-not-found=true
                        
                        REM Wait for cleanup
                        timeout /t 5 /nobreak > nul
                        
                        REM Apply fresh deployment and service  
                        echo Applying fresh deployment...
                        kubectl apply -f k8s/deployment.yaml
                        kubectl apply -f k8s/service.yaml
                        
                        REM Wait for deployment to be ready
                        echo Waiting for deployment to be ready...
                        kubectl wait --for=condition=available --timeout=300s deployment/express-deployment
                        
                        echo Deployment completed!
                        kubectl get pods -l app=express-app
                        kubectl get services express-service
                    """
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    echo 'Verifying deployment and testing access...'
                    bat """
                        REM Always run verification regardless of previous stage status
                        echo === FINAL DEPLOYMENT STATUS ===
                        kubectl get deployment express-deployment -o wide 2>nul || echo Deployment not found
                        kubectl get pods -l app=express-app -o wide 2>nul || echo No pods found
                        kubectl get services express-service 2>nul || echo Service not found
                        
                        REM Wait for application to be fully ready
                        echo Waiting for application to be ready...
                        kubectl wait --for=condition=available --timeout=120s deployment/express-deployment
                        
                        REM Test if service is responsive inside cluster
                        kubectl get pods -l app=express-app --no-headers 2>nul | findstr Running >nul
                        if %ERRORLEVEL% EQU 0 (
                            echo === APPLICATION READY ===
                            echo Testing external access...
                            
                            REM Wait a moment for NodePort to be fully ready
                            timeout /t 10 /nobreak > nul
                            
                            REM Test the actual access
                            curl -f http://localhost:3000 && (
                                echo === SUCCESS ===
                                echo Application is IMMEDIATELY accessible at: http://localhost:3000
                            ) || (
                                echo === TESTING ACCESS ===
                                echo NodePort should be accessible at: http://localhost:3000
                                echo If not immediately available, wait 30 seconds for port mapping to stabilize
                            )
                        ) else (
                            echo === ISSUES DETECTED ===
                            echo Application may not be ready. Check pod status above.
                            kubectl describe pods -l app=express-app
                        )
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo 'üéâ Pipeline completed successfully!'
            echo "‚úÖ Kind cluster: ${CLUSTER_NAME} is running with port mapping"
            echo "‚úÖ Using image: ${DOCKER_HUB_REPO}:latest"
            echo "‚úÖ Deployed to Kubernetes"
            echo "‚úÖ Application is AUTOMATICALLY accessible"
            echo ""
            echo "üåê Access your app immediately at: http://localhost:3000"
            echo "üöÄ No manual steps required!"
            echo ""
            echo "ÔøΩ Port mapping: localhost:3000 -> cluster NodePort:30080"
        }
        failure {
            echo '‚ùå Pipeline failed!'
            echo "Check logs above for details"
        }
        always {
            script {
                echo 'Pipeline cleanup completed'
                // Application remains accessible via automatic port mapping
            }
        }
    }
}
